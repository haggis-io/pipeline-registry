// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetDocumentsRequest struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Author  string `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Status  Status `protobuf:"varint,3,opt,name=status,enum=registry.Status" json:"status,omitempty"`
	Limit   int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetDocumentsRequest) Reset()                    { *m = GetDocumentsRequest{} }
func (m *GetDocumentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDocumentsRequest) ProtoMessage()               {}
func (*GetDocumentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetDocumentsRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetDocumentsRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *GetDocumentsRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *GetDocumentsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetDocumentsResponse struct {
	Documents []*Document `protobuf:"bytes,1,rep,name=Documents" json:"Documents,omitempty"`
}

func (m *GetDocumentsResponse) Reset()                    { *m = GetDocumentsResponse{} }
func (m *GetDocumentsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDocumentsResponse) ProtoMessage()               {}
func (*GetDocumentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetDocumentsResponse) GetDocuments() []*Document {
	if m != nil {
		return m.Documents
	}
	return nil
}

type GetDocumentRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetDocumentRequest) Reset()                    { *m = GetDocumentRequest{} }
func (m *GetDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDocumentRequest) ProtoMessage()               {}
func (*GetDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetDocumentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetDocumentRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GetDocumentResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
}

func (m *GetDocumentResponse) Reset()                    { *m = GetDocumentResponse{} }
func (m *GetDocumentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDocumentResponse) ProtoMessage()               {}
func (*GetDocumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type CreateDocumentRequest struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
}

func (m *CreateDocumentRequest) Reset()                    { *m = CreateDocumentRequest{} }
func (m *CreateDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDocumentRequest) ProtoMessage()               {}
func (*CreateDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CreateDocumentRequest) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type CreateDocumentResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
}

func (m *CreateDocumentResponse) Reset()                    { *m = CreateDocumentResponse{} }
func (m *CreateDocumentResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDocumentResponse) ProtoMessage()               {}
func (*CreateDocumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CreateDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type ApprovedDocumentRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *ApprovedDocumentRequest) Reset()                    { *m = ApprovedDocumentRequest{} }
func (m *ApprovedDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*ApprovedDocumentRequest) ProtoMessage()               {}
func (*ApprovedDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ApprovedDocumentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApprovedDocumentRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ApprovedDocumentResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
}

func (m *ApprovedDocumentResponse) Reset()                    { *m = ApprovedDocumentResponse{} }
func (m *ApprovedDocumentResponse) String() string            { return proto.CompactTextString(m) }
func (*ApprovedDocumentResponse) ProtoMessage()               {}
func (*ApprovedDocumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ApprovedDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type DeclinedDocumentRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *DeclinedDocumentRequest) Reset()                    { *m = DeclinedDocumentRequest{} }
func (m *DeclinedDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeclinedDocumentRequest) ProtoMessage()               {}
func (*DeclinedDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *DeclinedDocumentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeclinedDocumentRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeclinedDocumentResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
}

func (m *DeclinedDocumentResponse) Reset()                    { *m = DeclinedDocumentResponse{} }
func (m *DeclinedDocumentResponse) String() string            { return proto.CompactTextString(m) }
func (*DeclinedDocumentResponse) ProtoMessage()               {}
func (*DeclinedDocumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *DeclinedDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type PendingDocumentRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *PendingDocumentRequest) Reset()                    { *m = PendingDocumentRequest{} }
func (m *PendingDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*PendingDocumentRequest) ProtoMessage()               {}
func (*PendingDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *PendingDocumentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PendingDocumentRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PendingDocumentResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
}

func (m *PendingDocumentResponse) Reset()                    { *m = PendingDocumentResponse{} }
func (m *PendingDocumentResponse) String() string            { return proto.CompactTextString(m) }
func (*PendingDocumentResponse) ProtoMessage()               {}
func (*PendingDocumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *PendingDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDocumentsRequest)(nil), "registry.GetDocumentsRequest")
	proto.RegisterType((*GetDocumentsResponse)(nil), "registry.GetDocumentsResponse")
	proto.RegisterType((*GetDocumentRequest)(nil), "registry.GetDocumentRequest")
	proto.RegisterType((*GetDocumentResponse)(nil), "registry.GetDocumentResponse")
	proto.RegisterType((*CreateDocumentRequest)(nil), "registry.CreateDocumentRequest")
	proto.RegisterType((*CreateDocumentResponse)(nil), "registry.CreateDocumentResponse")
	proto.RegisterType((*ApprovedDocumentRequest)(nil), "registry.ApprovedDocumentRequest")
	proto.RegisterType((*ApprovedDocumentResponse)(nil), "registry.ApprovedDocumentResponse")
	proto.RegisterType((*DeclinedDocumentRequest)(nil), "registry.DeclinedDocumentRequest")
	proto.RegisterType((*DeclinedDocumentResponse)(nil), "registry.DeclinedDocumentResponse")
	proto.RegisterType((*PendingDocumentRequest)(nil), "registry.PendingDocumentRequest")
	proto.RegisterType((*PendingDocumentResponse)(nil), "registry.PendingDocumentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	GetDocuments(ctx context.Context, in *GetDocumentsRequest, opts ...grpc.CallOption) (*GetDocumentsResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	MarkAsApproved(ctx context.Context, in *ApprovedDocumentRequest, opts ...grpc.CallOption) (*ApprovedDocumentResponse, error)
	MarkAsDeclined(ctx context.Context, in *DeclinedDocumentRequest, opts ...grpc.CallOption) (*DeclinedDocumentResponse, error)
	MarkAsPending(ctx context.Context, in *PendingDocumentRequest, opts ...grpc.CallOption) (*PendingDocumentResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetDocuments(ctx context.Context, in *GetDocumentsRequest, opts ...grpc.CallOption) (*GetDocumentsResponse, error) {
	out := new(GetDocumentsResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/GetDocuments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/GetDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/CreateDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MarkAsApproved(ctx context.Context, in *ApprovedDocumentRequest, opts ...grpc.CallOption) (*ApprovedDocumentResponse, error) {
	out := new(ApprovedDocumentResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MarkAsApproved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MarkAsDeclined(ctx context.Context, in *DeclinedDocumentRequest, opts ...grpc.CallOption) (*DeclinedDocumentResponse, error) {
	out := new(DeclinedDocumentResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MarkAsDeclined", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MarkAsPending(ctx context.Context, in *PendingDocumentRequest, opts ...grpc.CallOption) (*PendingDocumentResponse, error) {
	out := new(PendingDocumentResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MarkAsPending", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	GetDocuments(context.Context, *GetDocumentsRequest) (*GetDocumentsResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	CreateDocument(context.Context, *CreateDocumentRequest) (*GetDocumentResponse, error)
	MarkAsApproved(context.Context, *ApprovedDocumentRequest) (*ApprovedDocumentResponse, error)
	MarkAsDeclined(context.Context, *DeclinedDocumentRequest) (*DeclinedDocumentResponse, error)
	MarkAsPending(context.Context, *PendingDocumentRequest) (*PendingDocumentResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetDocuments(ctx, req.(*GetDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CreateDocument(ctx, req.(*CreateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MarkAsApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovedDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MarkAsApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MarkAsApproved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MarkAsApproved(ctx, req.(*ApprovedDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MarkAsDeclined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclinedDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MarkAsDeclined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MarkAsDeclined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MarkAsDeclined(ctx, req.(*DeclinedDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MarkAsPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MarkAsPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MarkAsPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MarkAsPending(ctx, req.(*PendingDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocuments",
			Handler:    _Registry_GetDocuments_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _Registry_GetDocument_Handler,
		},
		{
			MethodName: "CreateDocument",
			Handler:    _Registry_CreateDocument_Handler,
		},
		{
			MethodName: "MarkAsApproved",
			Handler:    _Registry_MarkAsApproved_Handler,
		},
		{
			MethodName: "MarkAsDeclined",
			Handler:    _Registry_MarkAsDeclined_Handler,
		},
		{
			MethodName: "MarkAsPending",
			Handler:    _Registry_MarkAsPending_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdd, 0x4e, 0xea, 0x40,
	0x14, 0x85, 0x53, 0xfe, 0x0e, 0x6c, 0xce, 0x69, 0x4e, 0x46, 0x84, 0xa6, 0x11, 0x2d, 0xbd, 0xea,
	0x15, 0x31, 0xf8, 0x04, 0x28, 0x0a, 0x92, 0x90, 0x90, 0x6a, 0xe2, 0x75, 0x85, 0x09, 0x36, 0x42,
	0x5b, 0x67, 0xa6, 0x24, 0x3e, 0x81, 0x8f, 0xad, 0x49, 0x3b, 0xd3, 0x1f, 0x68, 0x31, 0x16, 0xef,
	0x98, 0xbd, 0xf6, 0xfe, 0xb2, 0xf6, 0xb0, 0xa6, 0x20, 0x13, 0xbc, 0xb2, 0x29, 0x23, 0xef, 0x7d,
	0x8f, 0xb8, 0xcc, 0x45, 0x75, 0x71, 0x56, 0xe5, 0xa5, 0xbb, 0xf0, 0x37, 0xd8, 0x61, 0xa1, 0xa2,
	0x7f, 0x48, 0x70, 0x32, 0xc6, 0x6c, 0xc4, 0xab, 0xd4, 0xc4, 0x6f, 0x3e, 0xa6, 0x0c, 0x29, 0xf0,
	0x67, 0x8b, 0x09, 0xb5, 0x5d, 0x47, 0x91, 0x34, 0xc9, 0x68, 0x98, 0xe2, 0x88, 0xda, 0x50, 0xb3,
	0x7c, 0xf6, 0xe2, 0x12, 0xa5, 0x14, 0x08, 0xfc, 0x84, 0x0c, 0xa8, 0x51, 0x66, 0x31, 0x9f, 0x2a,
	0x65, 0x4d, 0x32, 0xe4, 0xc1, 0xff, 0x7e, 0x64, 0xe2, 0x21, 0xa8, 0x9b, 0x5c, 0x47, 0x2d, 0xa8,
	0xae, 0xed, 0x8d, 0xcd, 0x94, 0x8a, 0x26, 0x19, 0x55, 0x33, 0x3c, 0xe8, 0x13, 0x68, 0xa5, 0x8d,
	0x50, 0xcf, 0x75, 0x28, 0x46, 0x97, 0xd0, 0x88, 0x8a, 0x8a, 0xa4, 0x95, 0x8d, 0xe6, 0x00, 0xc5,
	0x68, 0x21, 0x99, 0x71, 0x93, 0x7e, 0x0d, 0x28, 0x41, 0x12, 0x1b, 0x21, 0xa8, 0x38, 0xd6, 0x06,
	0xf3, 0x75, 0x82, 0xdf, 0xc9, 0x2d, 0x4b, 0xa9, 0x2d, 0xf5, 0xdb, 0xd4, 0xb5, 0x44, 0x66, 0xfa,
	0x50, 0x17, 0xb5, 0x00, 0x94, 0xed, 0x25, 0xea, 0xd1, 0xc7, 0x70, 0x7a, 0x43, 0xb0, 0xc5, 0xf0,
	0xae, 0x9b, 0x9f, 0x82, 0x26, 0xd0, 0xde, 0x05, 0x15, 0xb6, 0xd4, 0x19, 0x7a, 0x1e, 0x71, 0xb7,
	0x78, 0x79, 0xdc, 0x15, 0x4d, 0x41, 0xd9, 0x07, 0x15, 0x37, 0x35, 0xc2, 0x8b, 0xb5, 0xed, 0xfc,
	0x82, 0xa9, 0x7d, 0x50, 0x41, 0x53, 0x77, 0xd0, 0x9e, 0x63, 0x67, 0x69, 0x3b, 0xab, 0xe3, 0x3c,
	0xdd, 0x43, 0x67, 0x8f, 0x53, 0xcc, 0xd2, 0xe0, 0xb3, 0x0c, 0x75, 0x93, 0xeb, 0x68, 0x06, 0x7f,
	0x93, 0x2f, 0x06, 0x75, 0xe3, 0xd1, 0x8c, 0x27, 0xad, 0x9e, 0xe7, 0xc9, 0xdc, 0xcb, 0x14, 0x9a,
	0x89, 0x3a, 0x3a, 0xcb, 0x6c, 0x17, 0xb0, 0x6e, 0x8e, 0xca, 0x59, 0x73, 0x90, 0xd3, 0x71, 0x45,
	0x17, 0xf1, 0x40, 0xe6, 0x8b, 0xf8, 0x8e, 0xf8, 0x04, 0xf2, 0xcc, 0x22, 0xaf, 0x43, 0x2a, 0x32,
	0x87, 0x7a, 0xf1, 0x40, 0x4e, 0xa0, 0x55, 0xfd, 0x50, 0xcb, 0x2e, 0x58, 0xe4, 0x26, 0x09, 0xce,
	0x09, 0x65, 0x12, 0x9c, 0x1b, 0xb7, 0x47, 0xf8, 0x17, 0x82, 0xf9, 0x9f, 0x8f, 0xb4, 0x78, 0x28,
	0x3b, 0x57, 0x6a, 0xef, 0x40, 0x47, 0x48, 0x7d, 0xae, 0x05, 0xdf, 0xed, 0xab, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x57, 0x4a, 0x61, 0x42, 0xe3, 0x05, 0x00, 0x00,
}
