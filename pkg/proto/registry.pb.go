// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetEntitiesRequest struct {
	Type   string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Author string `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Status Status `protobuf:"varint,3,opt,name=status,enum=registry.Status" json:"status,omitempty"`
	Limit  int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetEntitiesRequest) Reset()                    { *m = GetEntitiesRequest{} }
func (m *GetEntitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntitiesRequest) ProtoMessage()               {}
func (*GetEntitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetEntitiesRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetEntitiesRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *GetEntitiesRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *GetEntitiesRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetEntitiesResponse struct {
	Entities []*Entity `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
}

func (m *GetEntitiesResponse) Reset()                    { *m = GetEntitiesResponse{} }
func (m *GetEntitiesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntitiesResponse) ProtoMessage()               {}
func (*GetEntitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetEntitiesResponse) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetEntityRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetEntityRequest) Reset()                    { *m = GetEntityRequest{} }
func (m *GetEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntityRequest) ProtoMessage()               {}
func (*GetEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetEntityRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetEntityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetEntityResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *GetEntityResponse) Reset()                    { *m = GetEntityResponse{} }
func (m *GetEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntityResponse) ProtoMessage()               {}
func (*GetEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetEntityResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateEntityRequest struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *CreateEntityRequest) Reset()                    { *m = CreateEntityRequest{} }
func (m *CreateEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEntityRequest) ProtoMessage()               {}
func (*CreateEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CreateEntityRequest) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateEntityResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *CreateEntityResponse) Reset()                    { *m = CreateEntityResponse{} }
func (m *CreateEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEntityResponse) ProtoMessage()               {}
func (*CreateEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CreateEntityResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type ApprovedEntityRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ApprovedEntityRequest) Reset()                    { *m = ApprovedEntityRequest{} }
func (m *ApprovedEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*ApprovedEntityRequest) ProtoMessage()               {}
func (*ApprovedEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ApprovedEntityRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApprovedEntityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ApprovedEntityResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *ApprovedEntityResponse) Reset()                    { *m = ApprovedEntityResponse{} }
func (m *ApprovedEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*ApprovedEntityResponse) ProtoMessage()               {}
func (*ApprovedEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ApprovedEntityResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeclinedEntityRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *DeclinedEntityRequest) Reset()                    { *m = DeclinedEntityRequest{} }
func (m *DeclinedEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*DeclinedEntityRequest) ProtoMessage()               {}
func (*DeclinedEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *DeclinedEntityRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeclinedEntityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeclinedEntityResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *DeclinedEntityResponse) Reset()                    { *m = DeclinedEntityResponse{} }
func (m *DeclinedEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*DeclinedEntityResponse) ProtoMessage()               {}
func (*DeclinedEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *DeclinedEntityResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type PendingEntityRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PendingEntityRequest) Reset()                    { *m = PendingEntityRequest{} }
func (m *PendingEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*PendingEntityRequest) ProtoMessage()               {}
func (*PendingEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *PendingEntityRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PendingEntityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PendingEntityResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *PendingEntityResponse) Reset()                    { *m = PendingEntityResponse{} }
func (m *PendingEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*PendingEntityResponse) ProtoMessage()               {}
func (*PendingEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *PendingEntityResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func init() {
	proto.RegisterType((*GetEntitiesRequest)(nil), "registry.GetEntitiesRequest")
	proto.RegisterType((*GetEntitiesResponse)(nil), "registry.GetEntitiesResponse")
	proto.RegisterType((*GetEntityRequest)(nil), "registry.GetEntityRequest")
	proto.RegisterType((*GetEntityResponse)(nil), "registry.GetEntityResponse")
	proto.RegisterType((*CreateEntityRequest)(nil), "registry.CreateEntityRequest")
	proto.RegisterType((*CreateEntityResponse)(nil), "registry.CreateEntityResponse")
	proto.RegisterType((*ApprovedEntityRequest)(nil), "registry.ApprovedEntityRequest")
	proto.RegisterType((*ApprovedEntityResponse)(nil), "registry.ApprovedEntityResponse")
	proto.RegisterType((*DeclinedEntityRequest)(nil), "registry.DeclinedEntityRequest")
	proto.RegisterType((*DeclinedEntityResponse)(nil), "registry.DeclinedEntityResponse")
	proto.RegisterType((*PendingEntityRequest)(nil), "registry.PendingEntityRequest")
	proto.RegisterType((*PendingEntityResponse)(nil), "registry.PendingEntityResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	MarkAsApproved(ctx context.Context, in *ApprovedEntityRequest, opts ...grpc.CallOption) (*ApprovedEntityResponse, error)
	MarkAsDeclined(ctx context.Context, in *DeclinedEntityRequest, opts ...grpc.CallOption) (*DeclinedEntityResponse, error)
	MarkAsPending(ctx context.Context, in *PendingEntityRequest, opts ...grpc.CallOption) (*PendingEntityResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error) {
	out := new(GetEntitiesResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/GetEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/GetEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/CreateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MarkAsApproved(ctx context.Context, in *ApprovedEntityRequest, opts ...grpc.CallOption) (*ApprovedEntityResponse, error) {
	out := new(ApprovedEntityResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MarkAsApproved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MarkAsDeclined(ctx context.Context, in *DeclinedEntityRequest, opts ...grpc.CallOption) (*DeclinedEntityResponse, error) {
	out := new(DeclinedEntityResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MarkAsDeclined", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MarkAsPending(ctx context.Context, in *PendingEntityRequest, opts ...grpc.CallOption) (*PendingEntityResponse, error) {
	out := new(PendingEntityResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MarkAsPending", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	GetEntities(context.Context, *GetEntitiesRequest) (*GetEntitiesResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	CreateEntity(context.Context, *CreateEntityRequest) (*GetEntityResponse, error)
	MarkAsApproved(context.Context, *ApprovedEntityRequest) (*ApprovedEntityResponse, error)
	MarkAsDeclined(context.Context, *DeclinedEntityRequest) (*DeclinedEntityResponse, error)
	MarkAsPending(context.Context, *PendingEntityRequest) (*PendingEntityResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetEntities(ctx, req.(*GetEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MarkAsApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovedEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MarkAsApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MarkAsApproved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MarkAsApproved(ctx, req.(*ApprovedEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MarkAsDeclined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclinedEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MarkAsDeclined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MarkAsDeclined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MarkAsDeclined(ctx, req.(*DeclinedEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MarkAsPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MarkAsPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MarkAsPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MarkAsPending(ctx, req.(*PendingEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntities",
			Handler:    _Registry_GetEntities_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Registry_GetEntity_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _Registry_CreateEntity_Handler,
		},
		{
			MethodName: "MarkAsApproved",
			Handler:    _Registry_MarkAsApproved_Handler,
		},
		{
			MethodName: "MarkAsDeclined",
			Handler:    _Registry_MarkAsDeclined_Handler,
		},
		{
			MethodName: "MarkAsPending",
			Handler:    _Registry_MarkAsPending_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4b, 0x6f, 0xaa, 0x40,
	0x14, 0xc7, 0xc3, 0x55, 0x89, 0x1e, 0xbd, 0xc6, 0x7b, 0x7c, 0x84, 0x70, 0x1f, 0x12, 0x56, 0x2c,
	0x6e, 0x5c, 0xd8, 0x5d, 0x93, 0x3e, 0xac, 0x36, 0x4d, 0x4c, 0x9a, 0x18, 0xfc, 0x04, 0xb4, 0x9e,
	0x58, 0x52, 0x05, 0xca, 0x8c, 0x4d, 0xd8, 0xf5, 0xc3, 0xf6, 0x83, 0x34, 0x85, 0x41, 0x11, 0xc1,
	0x54, 0xba, 0x9b, 0x39, 0x8f, 0xdf, 0xf9, 0x9f, 0xf1, 0x2f, 0xd0, 0xf4, 0x69, 0x69, 0x33, 0xee,
	0x07, 0x03, 0xcf, 0x77, 0xb9, 0x8b, 0xd5, 0xf8, 0xae, 0x36, 0xc8, 0xe1, 0x36, 0x17, 0x71, 0xfd,
	0x4d, 0x02, 0xbc, 0x23, 0x7e, 0xfb, 0x19, 0xb3, 0x89, 0x99, 0xf4, 0xb2, 0x21, 0xc6, 0x11, 0xa1,
	0xcc, 0x03, 0x8f, 0x14, 0x49, 0x93, 0x8c, 0x9a, 0x19, 0x9e, 0xb1, 0x07, 0xb2, 0xb5, 0xe1, 0x4f,
	0xae, 0xaf, 0xfc, 0x08, 0xa3, 0xe2, 0x86, 0x06, 0xc8, 0x8c, 0x5b, 0x7c, 0xc3, 0x94, 0x92, 0x26,
	0x19, 0xcd, 0x61, 0x6b, 0xb0, 0x9d, 0x3d, 0x0f, 0xe3, 0xa6, 0xc8, 0x63, 0x07, 0x2a, 0x2b, 0x7b,
	0x6d, 0x73, 0xa5, 0xac, 0x49, 0x46, 0xc5, 0x8c, 0x2e, 0xfa, 0x18, 0xda, 0x7b, 0x0a, 0x98, 0xe7,
	0x3a, 0x8c, 0xf0, 0x3f, 0x54, 0x49, 0xc4, 0x14, 0x49, 0x2b, 0x19, 0xf5, 0x24, 0x38, 0xac, 0x0e,
	0xcc, 0x6d, 0x85, 0x7e, 0x0e, 0xad, 0x18, 0x12, 0x1c, 0x5b, 0x02, 0xa1, 0xec, 0x58, 0x6b, 0x12,
	0x2b, 0x84, 0x67, 0xfd, 0x02, 0x7e, 0x25, 0x7a, 0xc5, 0x78, 0x03, 0xe4, 0xe8, 0xa1, 0xc2, 0xf6,
	0xac, 0xe1, 0x22, 0xaf, 0x5f, 0x41, 0x7b, 0xec, 0x93, 0xc5, 0x69, 0x7f, 0xfa, 0xd7, 0x01, 0xd7,
	0xd0, 0xd9, 0x07, 0x14, 0x90, 0xd0, 0x1d, 0x79, 0x9e, 0xef, 0xbe, 0xd2, 0xa2, 0xd8, 0x13, 0xdc,
	0x40, 0x2f, 0x0d, 0x28, 0x22, 0x62, 0x42, 0x8f, 0x2b, 0xdb, 0xf9, 0x86, 0x88, 0x34, 0xe0, 0x64,
	0x11, 0x97, 0xd0, 0x99, 0x91, 0xb3, 0xb0, 0x9d, 0x65, 0x31, 0x0d, 0x23, 0xe8, 0xa6, 0xfa, 0x4f,
	0x95, 0x30, 0x7c, 0x2f, 0x41, 0xd5, 0x14, 0x39, 0x9c, 0x42, 0x3d, 0x61, 0x6e, 0xfc, 0xb3, 0xeb,
	0x3a, 0xfc, 0xd7, 0xa9, 0x7f, 0x73, 0xb2, 0x42, 0xc2, 0x04, 0x6a, 0x5b, 0x9f, 0xa2, 0x7a, 0x58,
	0x1b, 0x2f, 0xab, 0xfe, 0xce, 0xcc, 0x09, 0xca, 0x14, 0x1a, 0x49, 0xb7, 0x61, 0x62, 0x68, 0x86,
	0x8d, 0x8f, 0xb3, 0xe6, 0xd0, 0xbc, 0xb7, 0xfc, 0xe7, 0x11, 0x8b, 0xcd, 0x83, 0xfd, 0x5d, 0x79,
	0xa6, 0x23, 0x55, 0x2d, 0xbf, 0x20, 0x0d, 0x8d, 0xcd, 0x90, 0x84, 0x66, 0x3a, 0x2c, 0x09, 0xcd,
	0x71, 0xd0, 0x0c, 0x7e, 0x46, 0x50, 0xf1, 0xeb, 0xe2, 0xbf, 0x5d, 0x4b, 0x96, 0x61, 0xd4, 0x7e,
	0x6e, 0x3e, 0x22, 0x3e, 0xc8, 0xe1, 0x07, 0xf4, 0xec, 0x23, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xa4,
	0xc8, 0x9d, 0x6a, 0x05, 0x00, 0x00,
}
